/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using FluentCassandra.Thrift.Protocol;

namespace FluentCassandra.Apache.Cassandra
{

  /// <summary>
  /// @deprecated use a KeyRange with row_filter in get_range_slices instead
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class IndexClause : TBase
  {

    public List<IndexExpression> Expressions { get; set; }

    public byte[] Start_key { get; set; }

    public int Count { get; set; }

    public IndexClause() {
      this.Count = 100;
    }

    public IndexClause(List<IndexExpression> expressions, byte[] start_key, int count) : this() {
      this.Expressions = expressions;
      this.Start_key = start_key;
      this.Count = count;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_expressions = false;
      bool isset_start_key = false;
      bool isset_count = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Expressions = new List<IndexExpression>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  IndexExpression _elem14 = new IndexExpression();
                  _elem14 = new IndexExpression();
                  _elem14.Read(iprot);
                  Expressions.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              isset_expressions = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Start_key = iprot.ReadBinary();
              isset_start_key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
              isset_count = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_expressions)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_start_key)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_count)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("IndexClause");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "expressions";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Expressions.Count));
        foreach (IndexExpression _iter15 in Expressions)
        {
          _iter15.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "start_key";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Start_key);
      oprot.WriteFieldEnd();
      field.Name = "count";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Count);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("IndexClause(");
      sb.Append("Expressions: ");
      sb.Append(Expressions);
      sb.Append(",Start_key: ");
      sb.Append(Start_key);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
